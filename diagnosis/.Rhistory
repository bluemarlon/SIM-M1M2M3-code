for(iter in 1:4){
if(iter==1){
phi = -0.9
}else if(iter==2){
phi=-0.4
}else if(iter==3){
phi=0.4
}else if(iter==4){
phi=0.9
}
MM1 <- c()
FE <- c(beta.0, beta.1, gamma.2)
# generate predictor x1
x1.new <- rnorm(n * nt, 0, 1)
X1 = matrix(x1.new, nt)
# generate predictor x2
x2.shape <- 1.5
x2.scale <- 1
x2.new <- rgamma(n * nt, shape = x2.shape, scale = x2.scale)
X2 = matrix(x2.new, nt)
for(kkkk in 1:100){
#processores
yjt = c()
random.save = c()
residual.save = c()
#repeated simulation
v2 = rnorm(n, 0, sqrt(sigmasq.2))
random.save = c(random.save, v2)
for(j in 1:n){
u.jt = arima.sim(n=nt+100, model=list(ar=c(phi)), sd = sqrt(sigmasq.u))[101:(nt+100)]
residual.save = c(residual.save, u.jt)
for(tt in 1:nt){
yjt = c(yjt,   u.jt[tt]+ beta.0 + beta.1 * X1[tt,j] + (gamma.2+v2[j])*X2[tt,j])
}
}
data.test = cbind(rep(1:n, each = nt), rep(1:nt, n), yjt, x1.new, x2.new)
colnames(data.test) = c("PID", "Day", "yjt","X1", "X2")
data.test = data.frame(data.test)
###########################step 1###########################
et <- c()
for(k in unique(data.test$PID)){
data.sub <- data.test %>% tbl_df() %>% filter(PID == k)
lm.fit <- lm(yjt~X1+X2, data = data.sub)
et <- rbind(et, cbind(lm.fit$residuals, k))
}
###########################step 2###########################
f <- c()
for(k in unique(data.test$PID)){
data.sub <- data.test %>% tbl_df() %>% filter(PID == k)
data.sub$et2 <- et[et[,2]==k, 1]^2
lm.fit2 <- lm(et2~X1+X2, data = data.sub)
f <- c(f, any(summary(lm.fit2)$coefficients[-1, 4] < alpha) )
}
###########################step 3###########################
if (mean(f)> p){
MM1 <- c(MM1, 3)
f1 <- cbind(f1, f)
ff1 <- cbind(ff1, NA)
next
}
###########################step 4###########################
ff <- c()
for(k in unique(data.test$PID)){
ff <- c(ff, Box.test(et[et[,2]==k, 1])$p.value < alpha)
}
ff1 <- cbind(ff1, ff)
if(mean(ff)> p){
MM1 <- c(MM1, 2)
}else{
MM1 <- c(MM1, 1)
}
}
# table(MM)
MM <- cbind(MM, MM1)
}
apply(MM, 2, table)
apply(MM, 2, table)
setwd("~/Dropbox/Renjie Chen/diagnosis")
saveRDS(list(f1, ff1), "RMf.rds")
dim(MM)
apply(MM, 2, table)
####1. fit model
setwd("~/Downloads/consulting/highfreq/renjie-clustering/random length/data")
# load("imputed-cng.Rdata")
# # View(cng.imputed)
# ##try first series
# ser1 <- cng.imputed[1,]
# ser1 <- ser1[-(1:8)] ###make just 10 years
load("new-imputed-cng.Rdata")
ser1 <- cng.dd.imputed["04000104413949",-(1:5)]
# cng.dd.imputed[1, -1]
library(lubridate)
###hold-out last year
ser1.hold <- ser1[((length(ser1)-11 ):length(ser1))]
ser1 <- ser1[-((length(ser1)-11 ):length(ser1))]
dat <- data.frame(ser1)
dat <- cbind(dat, t(matrix(unlist(strsplit(names(ser1), split = "-")), nrow = 2)) )
colnames(dat) <- c("val", "year", "month")
dat$year <- as.numeric(as.character(dat$year))
dat$month <- as.numeric(as.character(dat$month))
dat$quart <- floor( (dat$month-0.5)/ 4)
dat.hold <- data.frame(ser1.hold)
dat.hold <- cbind(dat.hold, t(matrix(unlist(strsplit(names(ser1.hold), split = "-")), nrow = 2)) )
colnames(dat.hold) <- c("val", "year", "month")
dat.hold$year <- as.numeric(as.character(dat.hold$year))
dat.hold$month <- as.numeric(as.character(dat.hold$month))
dat.hold$quart <- floor( (dat.hold$month-0.5)/ 4)
# dat <- dat[dat$year >= 2015, ]
summary(lm.fit <- lm(val~ 0+factor(month), data = dat))
coefs <- lm.fit$coefficients; sigmas <- var(lm.fit$residuals)
dat <- dat[dat$year >= 2015, ]
summary(lm.fit <- lm(val~ 0+factor(month), data = dat))
coefs <- lm.fit$coefficients; sigmas <- var(lm.fit$residuals)
C = 1.2
########################make critical values########################
alpha = 0.05
co.2 <- cumsum(coefs^2)
sigmas
ln.Tablr = sqrt((C-1)^2 * co.2/sigmas) * qnorm(1-alpha) - ((C-1)^2 * co.2)/(2*sigmas)
names(ln.Tablr) <- paste0("month", 1:12)
ln.Tablr
########################make sample values########################
e.ABLR <- c(1)
for(k in 1:length(dat.hold$val)){
e.ABLR <- c(e.ABLR, tail(e.ABLR, 1))
# if(threshold.ablr.alpha < tail(e.ABLR, 1)) # reseting the statistics
#   e.ABLR[length(e.ABLR)] <- 1
cc <- dnorm(x=dat.hold$val[k],
mean = rowSums(C*coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))/
dnorm(x=dat.hold$val[k],
mean = rowSums(coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))
e.ABLR[length(e.ABLR)] <- cc*tail(e.ABLR, 1)
}
C <- 1.2 #user defined C
for(k in 1:length(coefs)){
dat.hold <- cbind(dat.hold, 0)
}
for(k in 1:nrow(dat.hold)){
# dat.hold[k, 4+1+dat.hold$quart[k] ] <- 1
dat.hold[k, 4+ dat.hold$month[k] ] <- 1
}
colnames(dat.hold)[-(1:4)] <- c(#paste0("quart", 0:2, sep = ""),
paste0("month", 1:12, sep = "") )
C = 1.2
########################make critical values########################
alpha = 0.05
co.2 <- cumsum(coefs^2)
sigmas
ln.Tablr = sqrt((C-1)^2 * co.2/sigmas) * qnorm(1-alpha) - ((C-1)^2 * co.2)/(2*sigmas)
names(ln.Tablr) <- paste0("month", 1:12)
ln.Tablr
########################make sample values########################
e.ABLR <- c(1)
for(k in 1:length(dat.hold$val)){
e.ABLR <- c(e.ABLR, tail(e.ABLR, 1))
# if(threshold.ablr.alpha < tail(e.ABLR, 1)) # reseting the statistics
#   e.ABLR[length(e.ABLR)] <- 1
cc <- dnorm(x=dat.hold$val[k],
mean = rowSums(C*coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))/
dnorm(x=dat.hold$val[k],
mean = rowSums(coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))
e.ABLR[length(e.ABLR)] <- cc*tail(e.ABLR, 1)
}
e.ABLR <- e.ABLR[-1]
names(e.ABLR) = names(Tablr)
C = 1.2
########################make critical values########################
alpha = 0.05
co.2 <- cumsum(coefs^2)
sigmas
ln.Tablr = sqrt((C-1)^2 * co.2/sigmas) * qnorm(1-alpha) - ((C-1)^2 * co.2)/(2*sigmas)
names(ln.Tablr) <- paste0("month", 1:12)
ln.Tablr
########################make sample values########################
e.ABLR <- c(1)
for(k in 1:length(dat.hold$val)){
e.ABLR <- c(e.ABLR, tail(e.ABLR, 1))
# if(threshold.ablr.alpha < tail(e.ABLR, 1)) # reseting the statistics
#   e.ABLR[length(e.ABLR)] <- 1
cc <- dnorm(x=dat.hold$val[k],
mean = rowSums(C*coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))/
dnorm(x=dat.hold$val[k],
mean = rowSums(coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))
e.ABLR[length(e.ABLR)] <- cc*tail(e.ABLR, 1)
}
e.ABLR <- e.ABLR[-1]
names(e.ABLR) = names(ln.Tablr)
e.ABLR
C = 1.1
########################make critical values########################
alpha = 0.05
co.2 <- cumsum(coefs^2)
sigmas
ln.Tablr = sqrt((C-1)^2 * co.2/sigmas) * qnorm(1-alpha) - ((C-1)^2 * co.2)/(2*sigmas)
names(ln.Tablr) <- paste0("month", 1:12)
ln.Tablr
########################make sample values########################
e.ABLR <- c(1)
for(k in 1:length(dat.hold$val)){
e.ABLR <- c(e.ABLR, tail(e.ABLR, 1))
# if(threshold.ablr.alpha < tail(e.ABLR, 1)) # reseting the statistics
#   e.ABLR[length(e.ABLR)] <- 1
cc <- dnorm(x=dat.hold$val[k],
mean = rowSums(C*coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))/
dnorm(x=dat.hold$val[k],
mean = rowSums(coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))
e.ABLR[length(e.ABLR)] <- cc*tail(e.ABLR, 1)
}
e.ABLR <- e.ABLR[-1]
names(e.ABLR) = names(ln.Tablr)
e.ABLR
####1. fit model
setwd("~/Downloads/consulting/highfreq/renjie-clustering/random length/data")
# load("imputed-cng.Rdata")
# # View(cng.imputed)
# ##try first series
# ser1 <- cng.imputed[1,]
# ser1 <- ser1[-(1:8)] ###make just 10 years
load("new-imputed-cng.Rdata")
ser1 <- cng.dd.imputed["04000104413949",-(1:5)]
# cng.dd.imputed[1, -1]
library(lubridate)
###hold-out last year
ser1.hold <- ser1[((length(ser1)-11 ):length(ser1))]
ser1 <- ser1[-((length(ser1)-11 ):length(ser1))]
dat <- data.frame(ser1)
dat <- cbind(dat, t(matrix(unlist(strsplit(names(ser1), split = "-")), nrow = 2)) )
colnames(dat) <- c("val", "year", "month")
dat$year <- as.numeric(as.character(dat$year))
dat$month <- as.numeric(as.character(dat$month))
dat$quart <- floor( (dat$month-0.5)/ 4)
dat.hold <- data.frame(ser1.hold)
dat.hold <- cbind(dat.hold, t(matrix(unlist(strsplit(names(ser1.hold), split = "-")), nrow = 2)) )
colnames(dat.hold) <- c("val", "year", "month")
dat.hold$year <- as.numeric(as.character(dat.hold$year))
dat.hold$month <- as.numeric(as.character(dat.hold$month))
dat.hold$quart <- floor( (dat.hold$month-0.5)/ 4)
# dat <- dat[dat$year >= 2015, ]
summary(lm.fit <- lm(val~ 0+factor(month), data = dat))
coefs <- lm.fit$coefficients; sigmas <- var(lm.fit$residuals)
C <- 1.2 #user defined C
for(k in 1:length(coefs)){
dat.hold <- cbind(dat.hold, 0)
}
for(k in 1:nrow(dat.hold)){
# dat.hold[k, 4+1+dat.hold$quart[k] ] <- 1
dat.hold[k, 4+ dat.hold$month[k] ] <- 1
}
colnames(dat.hold)[-(1:4)] <- c(#paste0("quart", 0:2, sep = ""),
paste0("month", 1:12, sep = "") )
C = 1.2
########################make critical values########################
alpha = 0.05
co.2 <- cumsum(coefs^2)
sigmas
ln.Tablr = sqrt((C-1)^2 * co.2/sigmas) * qnorm(1-alpha) - ((C-1)^2 * co.2)/(2*sigmas)
names(ln.Tablr) <- paste0("month", 1:12)
ln.Tablr
########################make sample values########################
e.ABLR <- c(1)
for(k in 1:length(dat.hold$val)){
e.ABLR <- c(e.ABLR, tail(e.ABLR, 1))
# if(threshold.ablr.alpha < tail(e.ABLR, 1)) # reseting the statistics
#   e.ABLR[length(e.ABLR)] <- 1
cc <- dnorm(x=dat.hold$val[k],
mean = rowSums(C*coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))/
dnorm(x=dat.hold$val[k],
mean = rowSums(coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))
e.ABLR[length(e.ABLR)] <- cc*tail(e.ABLR, 1)
}
e.ABLR <- e.ABLR[-1]
names(e.ABLR) = names(ln.Tablr)
e.ABLR
C = 1.1
########################make critical values########################
alpha = 0.05
co.2 <- cumsum(coefs^2)
sigmas
ln.Tablr = sqrt((C-1)^2 * co.2/sigmas) * qnorm(1-alpha) - ((C-1)^2 * co.2)/(2*sigmas)
names(ln.Tablr) <- paste0("month", 1:12)
ln.Tablr
########################make sample values########################
e.ABLR <- c(1)
for(k in 1:length(dat.hold$val)){
e.ABLR <- c(e.ABLR, tail(e.ABLR, 1))
# if(threshold.ablr.alpha < tail(e.ABLR, 1)) # reseting the statistics
#   e.ABLR[length(e.ABLR)] <- 1
cc <- dnorm(x=dat.hold$val[k],
mean = rowSums(C*coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))/
dnorm(x=dat.hold$val[k],
mean = rowSums(coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))
e.ABLR[length(e.ABLR)] <- cc*tail(e.ABLR, 1)
}
e.ABLR <- e.ABLR[-1]
names(e.ABLR) = names(ln.Tablr)
e.ABLR
C = 1.5
########################make critical values########################
alpha = 0.05
co.2 <- cumsum(coefs^2)
sigmas
ln.Tablr = sqrt((C-1)^2 * co.2/sigmas) * qnorm(1-alpha) - ((C-1)^2 * co.2)/(2*sigmas)
names(ln.Tablr) <- paste0("month", 1:12)
ln.Tablr
########################make sample values########################
e.ABLR <- c(1)
for(k in 1:length(dat.hold$val)){
e.ABLR <- c(e.ABLR, tail(e.ABLR, 1))
# if(threshold.ablr.alpha < tail(e.ABLR, 1)) # reseting the statistics
#   e.ABLR[length(e.ABLR)] <- 1
cc <- dnorm(x=dat.hold$val[k],
mean = rowSums(C*coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))/
dnorm(x=dat.hold$val[k],
mean = rowSums(coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))
e.ABLR[length(e.ABLR)] <- cc*tail(e.ABLR, 1)
}
e.ABLR <- e.ABLR[-1]
names(e.ABLR) = names(ln.Tablr)
e.ABLR
log(e.ABLR)
C = 1.2
########################make critical values########################
alpha = 0.05
co.2 <- cumsum(coefs^2)
sigmas
ln.Tablr = sqrt((C-1)^2 * co.2/sigmas) * qnorm(1-alpha) - ((C-1)^2 * co.2)/(2*sigmas)
names(ln.Tablr) <- paste0("month", 1:12)
ln.Tablr
########################make sample values########################
e.ABLR <- c(1)
for(k in 1:length(dat.hold$val)){
e.ABLR <- c(e.ABLR, tail(e.ABLR, 1))
# if(threshold.ablr.alpha < tail(e.ABLR, 1)) # reseting the statistics
#   e.ABLR[length(e.ABLR)] <- 1
cc <- dnorm(x=dat.hold$val[k],
mean = rowSums(C*coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))/
dnorm(x=dat.hold$val[k],
mean = rowSums(coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))
e.ABLR[length(e.ABLR)] <- cc*tail(e.ABLR, 1)
}
e.ABLR <- log(e.ABLR[-1])
names(e.ABLR) = names(ln.Tablr)
e.ABLR
C = 1.1
########################make critical values########################
alpha = 0.05
co.2 <- cumsum(coefs^2)
sigmas
ln.Tablr = sqrt((C-1)^2 * co.2/sigmas) * qnorm(1-alpha) - ((C-1)^2 * co.2)/(2*sigmas)
names(ln.Tablr) <- paste0("month", 1:12)
ln.Tablr
########################make sample values########################
e.ABLR <- c(1)
for(k in 1:length(dat.hold$val)){
e.ABLR <- c(e.ABLR, tail(e.ABLR, 1))
# if(threshold.ablr.alpha < tail(e.ABLR, 1)) # reseting the statistics
#   e.ABLR[length(e.ABLR)] <- 1
cc <- dnorm(x=dat.hold$val[k],
mean = rowSums(C*coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))/
dnorm(x=dat.hold$val[k],
mean = rowSums(coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))
e.ABLR[length(e.ABLR)] <- cc*tail(e.ABLR, 1)
}
e.ABLR <- log(e.ABLR[-1])
names(e.ABLR) = names(ln.Tablr)
e.ABLR
C = 1.5
########################make critical values########################
alpha = 0.05
co.2 <- cumsum(coefs^2)
sigmas
ln.Tablr = sqrt((C-1)^2 * co.2/sigmas) * qnorm(1-alpha) - ((C-1)^2 * co.2)/(2*sigmas)
names(ln.Tablr) <- paste0("month", 1:12)
ln.Tablr
########################make sample values########################
e.ABLR <- c(1)
for(k in 1:length(dat.hold$val)){
e.ABLR <- c(e.ABLR, tail(e.ABLR, 1))
# if(threshold.ablr.alpha < tail(e.ABLR, 1)) # reseting the statistics
#   e.ABLR[length(e.ABLR)] <- 1
cc <- dnorm(x=dat.hold$val[k],
mean = rowSums(C*coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))/
dnorm(x=dat.hold$val[k],
mean = rowSums(coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))
e.ABLR[length(e.ABLR)] <- cc*tail(e.ABLR, 1)
}
e.ABLR <- log(e.ABLR[-1])
names(e.ABLR) = names(ln.Tablr)
e.ABLR
dat <- dat[dat$year >= 2015, ]
summary(lm.fit <- lm(val~ 0+factor(month), data = dat))
coefs <- lm.fit$coefficients; sigmas <- var(lm.fit$residuals)
C = 1.2
########################make critical values########################
alpha = 0.05
co.2 <- cumsum(coefs^2)
sigmas
ln.Tablr = sqrt((C-1)^2 * co.2/sigmas) * qnorm(1-alpha) - ((C-1)^2 * co.2)/(2*sigmas)
names(ln.Tablr) <- paste0("month", 1:12)
ln.Tablr
########################make sample values########################
e.ABLR <- c(1)
for(k in 1:length(dat.hold$val)){
e.ABLR <- c(e.ABLR, tail(e.ABLR, 1))
# if(threshold.ablr.alpha < tail(e.ABLR, 1)) # reseting the statistics
#   e.ABLR[length(e.ABLR)] <- 1
cc <- dnorm(x=dat.hold$val[k],
mean = rowSums(C*coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))/
dnorm(x=dat.hold$val[k],
mean = rowSums(coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))
e.ABLR[length(e.ABLR)] <- cc*tail(e.ABLR, 1)
}
e.ABLR <- log(e.ABLR[-1])
names(e.ABLR) = names(ln.Tablr)
e.ABLR
C = 1.1
########################make critical values########################
alpha = 0.05
co.2 <- cumsum(coefs^2)
sigmas
ln.Tablr = sqrt((C-1)^2 * co.2/sigmas) * qnorm(1-alpha) - ((C-1)^2 * co.2)/(2*sigmas)
names(ln.Tablr) <- paste0("month", 1:12)
ln.Tablr
########################make sample values########################
e.ABLR <- c(1)
for(k in 1:length(dat.hold$val)){
e.ABLR <- c(e.ABLR, tail(e.ABLR, 1))
# if(threshold.ablr.alpha < tail(e.ABLR, 1)) # reseting the statistics
#   e.ABLR[length(e.ABLR)] <- 1
cc <- dnorm(x=dat.hold$val[k],
mean = rowSums(C*coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))/
dnorm(x=dat.hold$val[k],
mean = rowSums(coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))
e.ABLR[length(e.ABLR)] <- cc*tail(e.ABLR, 1)
}
e.ABLR <- log(e.ABLR[-1])
names(e.ABLR) = names(ln.Tablr)
e.ABLR
C = 1.05
########################make critical values########################
alpha = 0.05
co.2 <- cumsum(coefs^2)
sigmas
ln.Tablr = sqrt((C-1)^2 * co.2/sigmas) * qnorm(1-alpha) - ((C-1)^2 * co.2)/(2*sigmas)
names(ln.Tablr) <- paste0("month", 1:12)
ln.Tablr
########################make sample values########################
e.ABLR <- c(1)
for(k in 1:length(dat.hold$val)){
e.ABLR <- c(e.ABLR, tail(e.ABLR, 1))
# if(threshold.ablr.alpha < tail(e.ABLR, 1)) # reseting the statistics
#   e.ABLR[length(e.ABLR)] <- 1
cc <- dnorm(x=dat.hold$val[k],
mean = rowSums(C*coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))/
dnorm(x=dat.hold$val[k],
mean = rowSums(coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))
e.ABLR[length(e.ABLR)] <- cc*tail(e.ABLR, 1)
}
e.ABLR <- log(e.ABLR[-1])
names(e.ABLR) = names(ln.Tablr)
e.ABLR
C = 1.02
########################make critical values########################
alpha = 0.05
co.2 <- cumsum(coefs^2)
sigmas
ln.Tablr = sqrt((C-1)^2 * co.2/sigmas) * qnorm(1-alpha) - ((C-1)^2 * co.2)/(2*sigmas)
names(ln.Tablr) <- paste0("month", 1:12)
ln.Tablr
########################make sample values########################
e.ABLR <- c(1)
for(k in 1:length(dat.hold$val)){
e.ABLR <- c(e.ABLR, tail(e.ABLR, 1))
# if(threshold.ablr.alpha < tail(e.ABLR, 1)) # reseting the statistics
#   e.ABLR[length(e.ABLR)] <- 1
cc <- dnorm(x=dat.hold$val[k],
mean = rowSums(C*coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))/
dnorm(x=dat.hold$val[k],
mean = rowSums(coefs*dat.hold[k,-(1:4), drop = F], na.rm = T),
sd = sqrt(sigmas))
e.ABLR[length(e.ABLR)] <- cc*tail(e.ABLR, 1)
}
e.ABLR <- log(e.ABLR[-1])
names(e.ABLR) = names(ln.Tablr)
e.ABLR
